---
title: "Minicurso: Ci√™ncia de Dados com R - Uma Introdu√ß√£o Pr√°tica"
author: "Fernando Andrade e Thiago Moraes Rizzieri"
date: "`r Sys.Date()`"
output: 
  rmdformats::readthedown
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Pacotes utilizados

Pacotes utilizados

```{r}
#|echo: true
library("rmdformats")
library(readr)
library(ggplot2)
library(dplyr)
library(datasets)
library(lubridate)
library(stringr)
options(tidyverse.quiet = TRUE)  # Suprime mensagens
```

# Opera√ß√µes B√°sicas com o R

```{r}
1 + 1
```

You can add options to executable code like this

```{r}

```

# Importa√ß√£o de dados

Como podemos importar dados para podermos trabalhar?

## Diret√≥rio de trabalho

Para que voc√™ possa importar um arquivo contendo dados, √© importante observar o diret√≥rio de trabalho no qual a sua sess√£o se encontra. Pode optar por alterar o diret√≥rio de trabalho para conseguir carregar seus arquivos.

No caso, vamos importar um arquivo diretamente do github, ent√£o n√£o nos preocuparemos com o diret√≥rio de trabalho.

```{r dados, include=TRUE}
dados <- read_csv("https://raw.githubusercontent.com/ThiagoMoraesRizzieri/minicurso_r/main/Pokemon_full.csv")
```

```{r}
head(dados)
```

# Cria√ß√£o de gr√°ficos: GGPLOT2

Essa se√ß√£o tem como objetivo principal mostrar o uso do ggplot2 para cria√ß√£o de gr√°ficos e boas pr√°ticas de uso.

Vamos carregar a biblioteca ggplot2 e outros pacotes

O ggplot2 funciona com constru√ß√£o de "camadas" (layers). O comando `ggplot()` inicia um gr√°fico vazio.

```{r plot1}
ggplot()

```

A partir deste gr√°fico vazio, podemos adicionar camadas de pontos, linhas, barras, caixas, entre outros. D√™ uma olhada no [manual de refer√™ncia](https://cran.r-project.org/web/packages/ggplot2/ggplot2.pdf). Outros como [tidyverse](https://ggplot2.tidyverse.org/), ou [Curso de R](https://livro.curso-r.com/8-1-o-pacote-ggplot2.html) podem ajudar bastante! Explore o m√°ximo.

### Adicionando layers

De maneira geral, a sintaxe que vamos usar √© `geom_yyy(data = dados, aes(x = x, y = y))`, sendo que iremos substituir yyy por "line" para linhas, "point" para pontos e assim por diante.

Por exemplo, para criar um plot de peso x altura temos

```{r plot2}
ggplot() +
  geom_point(data = dados, aes(x = height, y = weight))
```

Se quisermos que os pontos tenham uma cor em particular, usamos

```{r plot3}
ggplot() +
  geom_point(data = dados, aes(x = height, y = weight), color = "blue")

```

Se quisermos que a cor seja dependente de uma vari√°vel, por exemplo o tipo, precisamos colocar ela dentro do "aesthesic" e informar qual vari√°vel ser√° respons√°vel pela mudan√ßa de cor.

```{r}
ggplot()+
  geom_point(data = dados, aes(x = height, y = weight, color = type))
```

...

# Classifica√ß√£o: Pinguins do arquip√©lago Palmer

## **Conhe√ßa os pinguins** üêß

![Obra de¬†\@allison_horst.](images/clipboard-3055016893.png)

Os `palmerpenguins`dados cont√™m medi√ß√µes de tamanho de tr√™s esp√©cies de pinguins observadas em tr√™s ilhas no Arquip√©lago Palmer, na Ant√°rtida.

```{r}
library(palmerpenguins)
glimpse(penguins)

```

![](images/clipboard-1302732821.png){fig-align="center" width="445"}

### Usando head()

```{r}
#|echo: true
```

Usar¬†`head()`¬†pode ser interessante para ter um primeiro olhar para os dados:

```{r}
head(penguins)

```

### Usando arrange()

`arrange()`¬†organiza nossos dados em ordem *crescente*, partindo do menor valor da vari√°vel de interesse at√© o maior (ou em caso da vari√°vel ver qualitativa, ser√° apresentado em ordem alfab√©tica).

```{r}
penguins %>%
  arrange(bill_length_mm) %>%
  head()
```

### Criando um subconjunto com `subset()`

### Aplica√ß√£o de um modelo de classifica√ß√£o

```{r}
# Carregando os pacotes
library(tidymodels)



# Usar o dataset iris, dispon√≠vel por padr√£o no R
data(iris)

# Criar um split treino/teste
set.seed(123)
split <- initial_split(iris, prop = 0.8)
train <- training(split)
test <- testing(split)

# Definir o modelo (regress√£o log√≠stica multinomial)
modelo <- multinom_reg() %>%
  set_engine("nnet") %>%
  set_mode("classification")

# Criar o workflow
workflow <- workflow() %>%
  add_model(modelo) %>%
  add_formula(Species ~ .)

# Ajustar o modelo
ajustado <- fit(workflow, data = train)

# Previs√£o e avalia√ß√£o
pred <- predict(ajustado, new_data = test) %>%
  bind_cols(test)

# M√©tricas de desempenho
metrics(pred, truth = Species, estimate = .pred_class)

# Matriz de confus√£o
conf_mat(pred, truth = Species, estimate = .pred_class)

```
